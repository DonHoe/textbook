import{_ as s,o as a,c as n,S as l}from"./chunks/framework.e9d044e1.js";const o="/textbook/lock-mind.jpg",e="/textbook/ScheduledThreadPoolExecutor.png",u=JSON.parse('{"title":"Spring","description":"","frontmatter":{},"headers":[],"relativePath":"chapter/code/language/java.md","filePath":"chapter/code/language/java.md"}'),p={name:"chapter/code/language/java.md"},t=l(`<h1 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-label="Permalink to &quot;Spring&quot;">​</a></h1><h2 id="spring-boot" tabindex="-1">Spring Boot <a class="header-anchor" href="#spring-boot" aria-label="Permalink to &quot;Spring Boot&quot;">​</a></h2><h3 id="定时任务" tabindex="-1">定时任务 <a class="header-anchor" href="#定时任务" aria-label="Permalink to &quot;定时任务&quot;">​</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootApplication</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//启用定时任务</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">EnableScheduling</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MatchApplication</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		SpringApplication</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MatchApplication</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">XxxJob</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//固定频率</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Scheduled</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">fixedRate</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fixedRate</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//固定间隔 即每次方法执行完后等待指定时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Scheduled</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">fixedDelay</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fixedDelay</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//按cron表达式来执行</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Scheduled</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">cron</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cron</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><ol><li>nacos项目中启动服务出现<code>parse data from Nacos error,dataId:xxx.yml</code>错误，要在启动命令上加上编码：<code>java -Dfile.encoding=utf-8 -jar</code> 。</li></ol><h1 id="多线程" tabindex="-1">多线程 <a class="header-anchor" href="#多线程" aria-label="Permalink to &quot;多线程&quot;">​</a></h1><p><img src="`+o+`" alt="An image"></p><h2 id="volatile" tabindex="-1">volatile <a class="header-anchor" href="#volatile" aria-label="Permalink to &quot;volatile&quot;">​</a></h2><ol><li>数据发生更改后，立即从缓存回写到内存</li><li>回写操作会使得其他处理器的缓存无效</li></ol><h2 id="synchronized" tabindex="-1">synchronized <a class="header-anchor" href="#synchronized" aria-label="Permalink to &quot;synchronized&quot;">​</a></h2><pre><code>核心就是争夺monitor对象的所有权,monitorenter进入数+1,monitorexit进入数-1,直到为0。才可以被其他线程持有。  
synchronized方法上会有一个特殊的标志位ACC_SYNCHRONIZED，会隐式调用上述两个指令
</code></pre><h3 id="用法" tabindex="-1">用法: <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法:&quot;">​</a></h3><ul><li>普通方法，锁当前实例</li><li>静态方法，锁当前类</li><li>代码块，锁括号里面的对象</li></ul><h2 id="completablefuture" tabindex="-1">CompletableFuture <a class="header-anchor" href="#completablefuture" aria-label="Permalink to &quot;CompletableFuture&quot;">​</a></h2><table><thead><tr><th>静态方法</th><th>作用</th></tr></thead><tbody><tr><td><strong>supplyAsync</strong></td><td>返回CompletableFuture&lt;U&gt;，有类型为U的返回值</td></tr><tr><td><strong>runAsync</strong></td><td>返回CompletableFuture&lt;Void&gt;，只执行，无返回值</td></tr></tbody></table><p>上述两个静态方法创建后会立即执行。</p><h2 id="threadlocal" tabindex="-1">ThreadLocal <a class="header-anchor" href="#threadlocal" aria-label="Permalink to &quot;ThreadLocal&quot;">​</a></h2><h3 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>ThreadLocal提供了线程的局部变量。线程局部变量与普通变量不同之处在于，访问线程局部变量的每个线程（通过get方法或set方法）都有它自己的独立初始化的变量副本。</p><h2 id="线程池" tabindex="-1">线程池 <a class="header-anchor" href="#线程池" aria-label="Permalink to &quot;线程池&quot;">​</a></h2><h3 id="介绍-1" tabindex="-1">介绍 <a class="header-anchor" href="#介绍-1" aria-label="Permalink to &quot;介绍&quot;">​</a></h3><p>线程的创建和销毁开销较大，频繁的创建和销毁线程会影响程序性能。<strong>利用基于池化思想的线程池来统一管理和分配线程，复用已创建的线程，避免频繁创建和销毁线程带来的资源消耗，提高系统资源的利用率。</strong><br> 优点：</p><ul><li><strong>降低资源消耗</strong>，重复利用已经创建的线程，避免线程创建与销毁带来的资源消耗。</li><li><strong>提高响应速度</strong>，可以通过线程池直接获取线程，避免了创建线程带来的时间消耗。</li><li><strong>便于管理线程</strong>，统一管理和分配线程，避免无限制创建线程，另外可以引入线程监控机制。</li></ul><h3 id="如何创建" tabindex="-1">如何创建 <a class="header-anchor" href="#如何创建" aria-label="Permalink to &quot;如何创建&quot;">​</a></h3><h4 id="_1-threadpoolexecutor" tabindex="-1"><strong>1.ThreadPoolExecutor</strong> <a class="header-anchor" href="#_1-threadpoolexecutor" aria-label="Permalink to &quot;**1.ThreadPoolExecutor**&quot;">​</a></h4><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">ExecutorService</span><span style="color:#A6ACCD;"> tpe </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ThreadPoolExecutor</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        TimeUnit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SECONDS</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">LinkedBlockingQueue</span><span style="color:#89DDFF;">&lt;&gt;(),</span></span>
<span class="line"><span style="color:#A6ACCD;">        Executors</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defaultThreadFactory</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> ThreadPoolExecutor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AbortPolicy</span><span style="color:#89DDFF;">());</span></span></code></pre></div><p>参数依次为:</p><ul><li><code>int corePoolSize</code>， <strong>核心线程数</strong></li><li><code>int maximumPoolSize</code>， <strong>最大线程数</strong></li><li><code>long keepAliveTime</code>， 非核心线程（最大线程数-核心线程数）的存活时间。</li><li><code>TimeUnit unit</code>， keepAliveTime的单位。</li><li><code>BlockingQueue&lt;Runnable&gt; workQueue</code>，任务队列，当所有的线程都忙时，任务在此等待。</li><li><code>ThreadFactory threadFactory</code>，线程工厂，指示如何新建线程。</li><li><code>RejectedExecutionHandler handler</code>，拒绝策略，当所有线程都忙，且任务队列已满时，如何处理加入的任务 <ul><li><code>ThreadPoolExecutor.AbortPolicy</code>，默认策略，抛出<code>RejectedExecutionException</code>异常。</li><li><code>ThreadPoolExecutor.CallerRunsPolicy</code>，直接使用提交任务的线程来执行被拒绝的任务。</li><li><code>ThreadPoolExecutor.DiscardPolicy</code>，默默地丢弃被拒绝的任务，不会抛出任何异常。</li><li><code>ThreadPoolExecutor.DiscardOldestPolicy</code>，丢弃最旧的未处理任务，并尝试再次提交被拒绝的任务。</li></ul></li></ul><h4 id="_2-executors" tabindex="-1"><strong>2.Executors</strong> <a class="header-anchor" href="#_2-executors" aria-label="Permalink to &quot;**2.Executors**&quot;">​</a></h4><h5 id="executors-newcachedthreadpool" tabindex="-1"><code>Executors.newCachedThreadPool()</code> <a class="header-anchor" href="#executors-newcachedthreadpool" aria-label="Permalink to &quot;\`Executors.newCachedThreadPool()\`&quot;">​</a></h5><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ExecutorService</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newCachedThreadPool</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ThreadPoolExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Integer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_VALUE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                    </span><span style="color:#F78C6C;">60L</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> TimeUnit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SECONDS</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                    </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">SynchronousQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Runnable</span><span style="color:#89DDFF;">&gt;());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>核心线程为0，有任务加入时才创建线程，线程数量无上限，所有线程只存活60秒，即线程缓存60秒。SynchronousQueue工作队列不存储任务，插入删除同步阻塞，即新加入的任务会立马获得/创建线程来执行。缺点是，如果短时间有大量任务涌入，系统就会出现非常多的线程，导致负载过重。</p><h5 id="executors-newfixedthreadpool-10" tabindex="-1"><code>Executors.newFixedThreadPool(10)</code> <a class="header-anchor" href="#executors-newfixedthreadpool-10" aria-label="Permalink to &quot;\`Executors.newFixedThreadPool(10)\`&quot;">​</a></h5><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ExecutorService</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newFixedThreadPool</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> nThreads</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ThreadPoolExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">nThreads</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> nThreads</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                    </span><span style="color:#F78C6C;">0L</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> TimeUnit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MILLISECONDS</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                    </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">LinkedBlockingQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Runnable</span><span style="color:#89DDFF;">&gt;());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>固定数量的线程池，核心线程数和最大线程数一致，创建时传入。LinkedBlockingQueue的长度为Integer.MAX_VALUE，即如果所有线程都忙，新加入的任务会一直在队列中等待。</p><h5 id="executors-newsinglethreadexecutor" tabindex="-1"><code>Executors.newSingleThreadExecutor()</code> <a class="header-anchor" href="#executors-newsinglethreadexecutor" aria-label="Permalink to &quot;\`Executors.newSingleThreadExecutor()\`&quot;">​</a></h5><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ExecutorService</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newSingleThreadExecutor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">FinalizableDelegatedExecutorService</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ThreadPoolExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                </span><span style="color:#F78C6C;">0L</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> TimeUnit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MILLISECONDS</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">LinkedBlockingQueue</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Runnable</span><span style="color:#89DDFF;">&gt;()));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>只有一个线程的线程池，所有加入的任务会顺序执行。</p><h5 id="executors-newscheduledthreadpool-10" tabindex="-1"><code>Executors.newScheduledThreadPool(10)</code> <a class="header-anchor" href="#executors-newscheduledthreadpool-10" aria-label="Permalink to &quot;\`Executors.newScheduledThreadPool(10)\`&quot;">​</a></h5><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ScheduledExecutorService</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newScheduledThreadPool</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> corePoolSize</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ScheduledThreadPoolExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">corePoolSize</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//super 为 ThreadPoolExecutor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ScheduledThreadPoolExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> corePoolSize</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    super</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">corePoolSize</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Integer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MAX_VALUE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            DEFAULT_KEEPALIVE_MILLIS</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> MILLISECONDS</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">DelayedWorkQueue</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>创建一个定时执行任务的线程池，可以延迟或定期执行任务。不适用于需要实时执行任务的情况。</p><h5 id="executors-newsinglethreadscheduledexecutor" tabindex="-1"><code>Executors.newSingleThreadScheduledExecutor()</code> <a class="header-anchor" href="#executors-newsinglethreadscheduledexecutor" aria-label="Permalink to &quot;\`Executors.newSingleThreadScheduledExecutor()\`&quot;">​</a></h5><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ScheduledExecutorService</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newSingleThreadScheduledExecutor</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">DelegatedScheduledExecutorService</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ScheduledThreadPoolExecutor</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>与上面<code>newScheduledThreadPool</code>一样，区别在于只创建一个线程。</p><h5 id="executors-newworkstealingpool" tabindex="-1"><code>Executors.newWorkStealingPool()</code> <a class="header-anchor" href="#executors-newworkstealingpool" aria-label="Permalink to &quot;\`Executors.newWorkStealingPool()\`&quot;">​</a></h5><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ExecutorService</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">newWorkStealingPool</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ForkJoinPool</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Runtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getRuntime</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">availableProcessors</span><span style="color:#89DDFF;">(),</span></span>
<span class="line"><span style="color:#A6ACCD;">            ForkJoinPool</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">defaultForkJoinWorkerThreadFactory</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>使用<code>ForkJoinPool</code>来实现，其他5个使用的是<code>ThreadPoolExecutor</code>。内部通过 Work-Stealing 算法并行的处理任务，可以自动根据任务的类型和数量调整线程池的大小，窃取任务可能导致线程频繁切换，且无法保证任务的执行顺序。</p><h5 id="整体体系" tabindex="-1">整体体系 <a class="header-anchor" href="#整体体系" aria-label="Permalink to &quot;整体体系&quot;">​</a></h5><p><img src="`+e+'" alt="ScheduledThreadPoolExecutor"></p>',50),c=[t];function r(i,y,D,A,C,F){return a(),n("div",null,c)}const h=s(p,[["render",r]]);export{u as __pageData,h as default};
