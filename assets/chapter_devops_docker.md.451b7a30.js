import{_ as s,o as a,c as l,S as n}from"./chunks/framework.e9d044e1.js";const A=JSON.parse('{"title":"docker","description":"","frontmatter":{},"headers":[],"relativePath":"chapter/devops/docker.md","filePath":"chapter/devops/docker.md"}'),e={name:"chapter/devops/docker.md"},o=n(`<h1 id="docker" tabindex="-1">docker <a class="header-anchor" href="#docker" aria-label="Permalink to &quot;docker&quot;">​</a></h1><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><ul><li>pull 拉取镜像</li><li>images 查看本地镜像</li><li>search 查找镜像</li><li>commit 提交容器副本 -m：提交的描述信息 -a：指定镜像作者</li><li>tag 为镜像增加标签</li><li>network create 创建一个docker网络 -d：网络类型bridge或overlay；network ls 查看网络列表</li><li>build 构建镜像 -t：指定镜像名称 后续跟Dockerfile文件目录</li><li>run 运行容器</li><li>logs 查看容器内输出</li><li>start/stop/restart 启动/停止/重启 容器</li><li>attach/exec 进入容器，区别在于attach在退出终端时会停止容器，推荐使用exec</li><li>import /export 导入/导出容器</li><li>rm/rmi 删除 容器/镜像</li><li>ps 查看所有运行中的容器 -a：查看所有状态的容器 -l：查看最后一次创建的容器</li><li>port 查看容器的端口映射</li></ul><h3 id="run参数" tabindex="-1">run参数 <a class="header-anchor" href="#run参数" aria-label="Permalink to &quot;run参数&quot;">​</a></h3><ul><li>-i 可与容器进行交互</li><li>-t 在容器内指定终端</li><li>-d 后台运行</li><li>-P 使用容器内的随机端口映射到外部主机</li><li>-p host:container 指定主机到容器的端口映射</li><li>--name 指定容器名称</li><li>--network 指定网络 host表示跟主机一致</li><li>--rm 容器退出时，自动清理容器内的文件系统</li><li>-h HOSTNAME --hostname=HOSTNAME 设定容器的主机名</li><li>--dns=IP_ADDRESS 添加 DNS 服务器到容器 --dns-search=DOMAIN： 设定容器的搜索域</li><li>-u uid:gid 指定用户组</li><li>-e TZ=Asia/Shanghai 指定时区</li></ul><h3 id="dockerfile文件" tabindex="-1">Dockerfile文件 <a class="header-anchor" href="#dockerfile文件" aria-label="Permalink to &quot;Dockerfile文件&quot;">​</a></h3><div class="language-docker"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#A6ACCD;"> ubuntu</span></span>
<span class="line"><span style="color:#F78C6C;">COPY</span><span style="color:#A6ACCD;"> hom* /mydir/</span></span>
<span class="line"><span style="color:#F78C6C;">VOLUME</span><span style="color:#A6ACCD;"> [</span><span style="color:#C3E88D;">&quot;&lt;路径1&gt;&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">&quot;&lt;路径2&gt;&quot;</span><span style="color:#A6ACCD;">...]</span></span>
<span class="line"><span style="color:#F78C6C;">WORKDIR</span><span style="color:#A6ACCD;"> &lt;工作目录路径&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">ENTRYPOINT</span><span style="color:#A6ACCD;"> [</span><span style="color:#C3E88D;">&quot;nginx&quot;</span><span style="color:#A6ACCD;">, </span><span style="color:#C3E88D;">&quot;-c&quot;</span><span style="color:#A6ACCD;">] # 定参</span></span>
<span class="line"><span style="color:#F78C6C;">CMD</span><span style="color:#A6ACCD;"> [</span><span style="color:#C3E88D;">&quot;/etc/nginx/nginx.conf&quot;</span><span style="color:#A6ACCD;">] # 变参 </span></span>
<span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#A6ACCD;"> echo foo &gt; bar</span></span>
<span class="line"><span style="color:#F78C6C;">EXPOSE</span><span style="color:#A6ACCD;"> &lt;端口1&gt; [&lt;端口2&gt;...]</span></span></code></pre></div><p><strong>FROM</strong> 指定运行的镜像<br><strong>RUN/CMD</strong> 用于执行命令，RUN在docker build时运行，CMD 在docker run 时运行<br><strong>ENTRYPOIN</strong> 类似CMD，在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。仅最后一个生效<br><strong>COPY/ADD</strong> 复制命令，从本机文件复制到容器内的路径。ADD会讲压缩文件解压到目标路径，无法复制压缩文件，可能会使构建比较慢<br><strong>VOLUME</strong> 定义匿名数据卷，避免数据因为重启而丢失和容器不断变大<br><strong>WORKDIR</strong> 指定工作目录<br><strong>EXPOSE</strong> 声明端口</p><h3 id="tips" tabindex="-1">TIPS <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;TIPS&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 安装脚本</span></span>
<span class="line"><span style="color:#A6ACCD;"> curl -fsSL https://get.docker.com -o get-docker.sh</span></span>
<span class="line"><span style="color:#A6ACCD;"> sudo sh get-docker.sh</span></span>
<span class="line"><span style="color:#A6ACCD;">// 进入容器</span></span>
<span class="line"><span style="color:#A6ACCD;">docker exec -ti container-name /bin/sh</span></span>
<span class="line"><span style="color:#A6ACCD;">// 构建本地镜像， -f 可指定Dockerfile文件地址，最后的.为上下文，也可指定路径</span></span>
<span class="line"><span style="color:#A6ACCD;">docker build -t name:tag .</span></span>
<span class="line"><span style="color:#A6ACCD;">// 运行容器</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run -d -p 主:容 -v 主:容 --name name image:tag</span></span></code></pre></div>`,10),t=[o];function r(i,p,c,d,C,h){return a(),l("div",null,t)}const D=s(e,[["render",r]]);export{A as __pageData,D as default};
